package vn.smartdev.invoicetest;import org.fest.assertions.Assertions;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.mockito.*;import org.mockito.invocation.InvocationOnMock;import org.mockito.runners.MockitoJUnitRunner;import org.mockito.stubbing.Answer;import vn.smartdev.invoice.dao.entity.Invoice;import vn.smartdev.invoice.dao.entity.InvoiceDetail;import vn.smartdev.invoice.dao.model.CartModel;import vn.smartdev.invoice.dao.model.InvoiceModel;import vn.smartdev.invoice.dao.repository.InvoiceRepository;import vn.smartdev.invoice.manager.InvoiceDetailServiceImpl;import vn.smartdev.invoice.manager.InvoiceServiceImpl;import vn.smartdev.product.dao.entity.ProductDetail;import java.util.ArrayList;import java.util.List;/** * Created by Nguyen on 30/11/2016. */@RunWith(MockitoJUnitRunner.class)public class InvoiceTest extends PrepareInvoice{    @InjectMocks    InvoiceServiceImpl invoiceService;    @InjectMocks    InvoiceDetailServiceImpl invoiceDetailService;    @Mock    InvoiceRepository invoiceRepository;    @Before    public void setUp()    {        MockitoAnnotations.initMocks(this);        invoiceMap = prepareinvoice(10);        Mockito.when(invoiceRepository.findAll()).thenAnswer(new Answer<List<Invoice>>() {            @Override            public List<Invoice> answer(InvocationOnMock invocationOnMock) throws Throwable {                List<Invoice> listInvoice = getListinvoice(invoiceMap);                return listInvoice;            }        });        Mockito.when(invoiceRepository.findOne("invoice 1")).thenReturn(new Invoice("invoice of 1"));    }    @Test    public void shouldReturn10WhenGetListInvoice(){        List<Invoice> invoices = invoiceService.getAll();        Assertions.assertThat(invoices.size()).isEqualTo(10);    }    @Test    public void shouldReturnInvoice2WhenGetInvoiceByUsername(){        Invoice invoice = invoiceService.findById("invoice 1");        Assertions.assertThat(invoice.getUsername()).isEqualTo("invoice of 1");    }    @Test    public void shouldReturnInvoiceOf1WhenDeleteInvoiceByUsername(){        ArgumentCaptor<Invoice> invoiceStringArgumentCaptor = ArgumentCaptor.forClass(Invoice.class);        Invoice invoice = new Invoice("invoice of 1");        invoiceService.deleteByinvoice(invoice);        Mockito.verify(invoiceRepository, Mockito.times(1)).delete(invoiceStringArgumentCaptor.capture());        Invoice invoiceCheck = invoiceStringArgumentCaptor.getValue();        Assertions.assertThat(invoiceCheck.getUsername()).isEqualTo("invoice of 1");    }//    @Test//    public void shouldReturnInvoiceOf2WhenSaveInvoiceByUsername(){//        ArgumentCaptor<Invoice> invoiceStringArgumentCaptor = ArgumentCaptor.forClass(Invoice.class);//        invoiceService.save(prepareInvoice(), prepareCart());//        Mockito.verify(invoiceRepository, Mockito.times(1)).save(invoiceStringArgumentCaptor.capture());//        Invoice invoiceCheck = invoiceStringArgumentCaptor.getValue();//        Assertions.assertThat(invoiceCheck.getUsername()).isEqualTo("toan");//    }}