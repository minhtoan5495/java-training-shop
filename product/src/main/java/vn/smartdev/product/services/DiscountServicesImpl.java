package vn.smartdev.product.services;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Isolation;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import vn.smartdev.product.dao.entity.Discount;import vn.smartdev.product.dao.entity.Product;import vn.smartdev.product.dao.manager.DiscountManager;import vn.smartdev.product.dao.model.DiscountModel;import vn.smartdev.product.dao.repository.DiscountRepository;import vn.smartdev.product.exception.DiscountAlreadyException;import vn.smartdev.product.exception.DiscountNotFoundException;import vn.smartdev.product.exception.ProductNotFoundException;import vn.smartdev.product.services.DiscountServices;import vn.smartdev.product.services.ProductServices;import java.util.List;@Servicepublic class DiscountServicesImpl implements DiscountServices {    private static final Logger logger = LoggerFactory.getLogger(DiscountServicesImpl.class);    @Autowired    DiscountManager discountManager;    @Autowired    ProductServices productServices;    @Override    public Discount findByProduct(Product product) {        Discount discount = null;        try {            discount = discountManager.findByProduct(product);        } catch (DiscountNotFoundException e) {            logger.error("findByProduct with discount failed : "+e.getMessage());        }        return discount;    }    @Override    public List<Discount> findAll() {        List<Discount> listDiscount = null;        try{            listDiscount = discountManager.findAll();        } catch (DiscountNotFoundException e) {            logger.error("findAll discount failed : "+e.getMessage());        }        return listDiscount;    }    @Override    public void deleteDiscount(String discountID) {        try        {            discountManager.delete(discountID);        } catch (DiscountNotFoundException e) {            logger.error("deleteDiscount failed : "+e.getMessage());        }    }    @Override    @Transactional(isolation = Isolation.DEFAULT, propagation = Propagation.REQUIRED)    public void save(DiscountModel discountModel) {        Discount discount = new Discount();        Product product = productServices.getProduct(discountModel.getProduct_id());        discount.setProduct(product);        discount.setStartDate(discountModel.getStartDate());        discount.setEndDate(discountModel.getEndDate());        discount.setPercent((discountModel.getPercent()));        try {            discountManager.save(discount);        } catch (DiscountAlreadyException e) {            logger.error("% discount is exist in listDiscount : "+e.getMessage());        }    }}