package vn.smartdev.controller;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.ui.ModelMap;import org.springframework.util.StringUtils;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.servlet.ModelAndView;import vn.smartdev.category.dao.entity.Category;import vn.smartdev.category.manager.CategoryServices;import vn.smartdev.product.dao.entity.Product;import vn.smartdev.product.manager.ProductServices;import vn.smartdev.user.dao.model.UserModel;import vn.smartdev.user.exception.UserAlreadyExistsException;import vn.smartdev.user.dao.manager.UserManager;import javax.management.relation.RoleNotFoundException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpSession;import javax.validation.Valid;import java.util.List;/** * Created by Nguyen on 09/12/2016. */@Controller@RequestMapping(value = "/")public class LoginController {    @Autowired    private CategoryServices categoryServices;    @Autowired    UserManager userManager;    @Autowired    private ProductServices productServices;    private Logger logger = LoggerFactory.getLogger(LoginController.class);    @RequestMapping(value = "/login", method = RequestMethod.GET)    public ModelAndView loginPage(@RequestParam(value = "error", required = false) String error,                                  @RequestParam(value = "logout", required = false) String logout,                                  HttpServletRequest request,                                  ModelMap model) {        UserModel userModel = new UserModel();        model.addAttribute("userModel", userModel);        ModelAndView modelAndView = new ModelAndView();        if (error != null) {            modelAndView.addObject("error", "Invalid Credentials provided.");            String targetUrl = getRememberMeTargetUrlFromSession(request);            System.out.println(targetUrl);            if (StringUtils.hasText(targetUrl)) {                modelAndView.addObject("targetUrl", targetUrl);                modelAndView.addObject("homePage", true);            }        }        if (logout != null) {            modelAndView.addObject("message", "Logged out from SmartDev successfully.");        }        List<Category> listCategory = categoryServices.getListCategory();        List<Product> listProduct = productServices.getListProduct();        model.addAttribute("listCategory", listCategory);        model.addAttribute("listProduct", listProduct);        modelAndView.setViewName("signinPage");        return modelAndView;    }    @ModelAttribute("listCategory")    public void listAllCategory(ModelMap modelMap) {        List<Category> listCategory = categoryServices.getListCategory();        List<Product> listProduct = productServices.getListProduct();        modelMap.addAttribute("listCategory", listCategory);        modelMap.addAttribute("listProduct", listProduct);    }    @RequestMapping(value = "/registration", method = RequestMethod.POST)    public String createUser(@Valid UserModel userModel, BindingResult bindingResult, Model model) throws UserAlreadyExistsException, RoleNotFoundException {        model.addAttribute("userModel", userModel);        if (bindingResult.hasErrors()) {            // handle error            logger.error("===Got error");            return "signinPage";        } else {            logger.info("=== No error");        }        userManager.save(userModel);        return "redirect:/";    }    private String getRememberMeTargetUrlFromSession(HttpServletRequest request) {        String targetUrl = "";        HttpSession session = request.getSession(false);        if (session != null) {            targetUrl = session.getAttribute("targetUrl") == null ? ""                    : session.getAttribute("targetUrl").toString();        }        return targetUrl;    }}